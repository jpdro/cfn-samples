---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: EC2 start-stop -scheduler

Parameters:

  Instances:
    Type: List<AWS::EC2::Instance::Id>
    Description: Instance IDs
    Default: ""

  StartSchedule:
    Type: String
    Description: Schedule expression in UTC, cron(min, hour, day-of-month, month, day-of-week, year)
    Default: "cron(0 8 * * ? *)"

  StopSchedule:
    Type: String
    Description: Schedule expression in UTC, cron(min, hour, day-of-month, month, day-of-week, year)
    Default: "cron(0 18 * * ? *)"
  
Globals:

  Function:
    Runtime: python2.7
    Timeout: 300
    Handler: index.handler
    Environment:
      Variables:
        region: !Ref AWS::Region
        instances: !Join [ ',', !Ref Instances ]

Resources:

  StartInstances:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Start Ec2 Instances
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:StartInstances
              Resource: '*'
      Events:
        ScheduledRun:
          Type: Schedule
          Properties:
            Schedule: !Ref StartSchedule
      InlineCode: |
        import boto3
        import os
        region = os.environ['region']
        instances = os.environ['instances'].split(',')

        def handler(event, context):
          ec2 = boto3.client('ec2', region_name=region)
          ec2.start_instances(InstanceIds=instances)
          print 'INFO: Started instances: ' + str(instances)

  StopInstances:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Stop Ec2 Instances
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:StopInstances
              Resource: '*'
      Events:
        ScheduledRun:
          Type: Schedule
          Properties:
            Schedule: !Ref StopSchedule
      InlineCode: |
        import boto3
        import os
        region = os.environ['region']
        instances = os.environ['instances'].split(',')

        def handler(event, context):
          ec2 = boto3.client('ec2', region_name=region)
          ec2.stop_instances(InstanceIds=instances)
          print 'INFO: Stopped instances: ' + str(instances)
